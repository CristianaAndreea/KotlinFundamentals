Questions about android to review:

From ImageResources Kotlin tutorial

Question 1
Which <ImageView> attribute indicates a source image that should be used only in Android Studio?

android:srcCompat
app:src
tools:src
tools:sourceImage


Question 2
Which method changes the image resource for an ImageView in Kotlin code? xmx

setImageResource()
setImageURI()
setImage()
setImageRes()


Question 3
What does the lateinit keyword in a variable declaration indicate in Kotlin code?

The variable is never initialized.
The variable is only initialized at app runtime.
The variable is automatically initialized to null.
The variable will be initialized later. I promise!


Question 4
Which Gradle configuration indicates the most recent API level your app has been tested with?

minSdkVersion
compileSdkVersion
targetSdkVersion
testSdkVersion


Question 5
You see an import line in your code that starts with androidx. What does this mean?

The class is part of the Android Jetpack libraries.
The class is in an external library that will be dynamically loaded when the app runs.
The class is "extra" and optional to your class.
The class is part of Android's XML support.

------------------------------

AboutMeInteractive - > didn't do it

Question 1
What is EditText a subclass of?

View
LinearLayout
TextView
Button


Question 2
Which of the following visibility attribute values, if set on a view, makes it so the view is hidden and does not take up any space in the layout?

visible
Invisible
gone
hide


Question 3
For EditText views, it's not a good practice to provide hints, because hints clutter the input field. True or false?

True
False


Question 4
Which one of the following statements is true about Button views?

A Button view is a view group.
You can only have three Button views per screen.
Button views are clickable, and on click, the attached click listener performs an action.
Button is an extension of ImageView.

------------------------------

Tutorial Color My views

Baseline constraints:

A baseline constraint aligns a view's text baseline to the text baseline of another view that has text.
Baseline constraints are helpful when views have different font sizes.

Design-time attributes:

Design-time attributes are used and applied only during the layout design, not at runtime. When you run the app, design-time attributes are ignored.
Design-time attributes are prefixed with the tools namespace. For example, the tools:layout_editor_absoluteY and tools:text attributes are design-time attributes.


Questions

Question 1
In a constraint layout, which of the following choices describes the constraints needed to keep a view in place during runtime?

Two horizontal constraints.
One vertical constraint.
At least one horizontal and one vertical constraint.
There is no need to constrain the view.


Question 2
Which of the following constraint types expands a view only as much as needed to fit its contents?

Wrap content
Match constraint
Fixed constraint
Baseline constraint

Question 3
The baseline constraint aligns the text baseline of a view to the text baseline of another view. True or false?

True
False

Question 4
The view inspector is available only for views in _______ .

A ConstraintLayout
A ConstraintLayout or a LinearLayout
Any ViewGroup
A LinearLayout

Question 5
A chain is a group of views that are linked to each other with ________ .

Top and bottom constraints
Bidirectional constraints
Right and left constraints
Baseline constraints

------------------------------

Data-binding basics tutorial

Why use data binding?

 Use data binding to eliminate findViewById()

 Every time you use findViewById() to search for a view after the view is created or recreated, the Android system traverses the view hierarchy at runtime to find it. When your app has only a handful of views, this is not a problem. However, production apps may have dozens of views in a layout, and even with the best design, there will be nested views.


One solution is to create an object that contains a reference to each view. This object, called a Binding object, can be used by your whole app. This technique is called data binding. Once a binding object has been created for your app, you can access the views, and other data, through the binding object, without having to traverse the view hierarchy or search for the data.


Data binding has the following benefits:

Code is shorter, easier to read, and easier to maintain than code that uses findByView().
Data and views are clearly separated. This benefit of data binding becomes increasingly important later in this course.
The Android system only traverses the view hierarchy once to get each view, and it happens during app startup, not at runtime when the user is interacting with the app.
You get type safety for accessing views. (Type safety means that the compiler validates types while compiling, and it throws an error if you try to assign the wrong type to a variable.)

dataBinding {
    enabled = true
}

Change layout file to be usable with data binding
To work with data binding, you need to wrap your XML layout with a <layout> tag. This is so that the root class is no longer a view group, but is instead a layout that contains view groups and views. The binding object can then know about the layout and the views in it.
 